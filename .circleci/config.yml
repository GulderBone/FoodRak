version: 2.1

references:
  gradle_wrapper_paths: &gradle_wrapper_paths
    paths:
      - "~/.gradle/wrapper"

  cache_paths: &cache_paths
    paths:
      - "~/.gradle/caches"

executors:
  android:
    docker:
      - image: cimg/android:2022.3.1
    resource_class: large
    working_directory: ~/android-payments
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4g
      GRADLE_OPTS: -Xmx4g -Dkotlin.compiler.execution.strategy=in-process

workflows:
  workflow:
    jobs:
      - code-analysis:
          context: GitHub
      - unit-tests:
          context: GitHub
      - build-apks:
          context: GitHub

jobs:
  code-analysis:
    executor: android

    steps:
      - checkout
      - restore_cache:
          key: wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          name: Restore Gradle cache
          key: cache-check-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
      - run:
          name: Static code analysis
          command: ./gradlew detekt lintDebug
      - store_artifacts:
          path: app/build/reports/lint-results.html
          destination: artifacts
      - save_cache:
          key: wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          <<: *gradle_wrapper_paths
      - save_cache:
          key: cache-check-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
          <<: *cache_paths
      - persist_to_workspace:
          root: .
          paths:
            - .

  unit-tests:
    executor: android

    steps:
      - checkout
      - restore_cache:
          key: wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          name: Restore Gradle cache
          key: cache-check-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
      - run:
          name: Unit Tests
          command: ./gradlew clean testDebug
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - save_cache:
          key: wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          <<: *gradle_wrapper_paths
      - save_cache:
          key: cache-check-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
          <<: *cache_paths

  build-apks:
    executor: android

    steps:
      - attach_workspace:
          at: .
      - checkout
      - restore_cache:
          key: wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          name: Restore Gradle cache
          key: cache-build-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
      - run:
          name: create Keystore
          command: |
            echo $KEYSTORE | base64 -d > app/release.jks
      - run:
          name: Build Qa APKs
          command: ./gradlew clean assembleQa
      - run:
          name: Build UAT APKs
          command: |
            BRANCH_REGEX="^(hotfix.*|rc.*|.*-hotfix|.*-rc)$"; if [[ $CIRCLE_BRANCH =~ $BRANCH_REGEX ]] ; then ./gradlew assembleUat; fi
      - run:
          name: Build Release APKs
          command: |
            BRANCH_REGEX="^(main|develop|hotfix.*|rc.*|.*-hotfix|.*-rc)$"; if [[ $CIRCLE_BRANCH =~ $BRANCH_REGEX ]] ; then ./gradlew assembleRelease; fi
      - run:
          name: create Firebase App Distribution Key file
          command: |
            echo $FIREBASE_SERVICE_KEY | base64 -d > gcloud-service-key.json
      - run:
          name: Upload Qa App to Firebase
          command: |
            echo "Current branch is ${CIRCLE_BRANCH}"
            BRANCH_REGEX="^(main|develop)$"; if [[ $CIRCLE_BRANCH =~ $BRANCH_REGEX ]] ; then ./gradlew --no-daemon --max-workers=2 appDistributionUploadQa; fi
      - save_cache:
          key: cache-build-{{ checksum "buildSrc/src/main/kotlin/Dependency.kt" }}
          <<: *cache_paths
      - store_artifacts:
          path: app/build/outputs/apk
          destination: artifacts
      - store_artifacts:
          path: app/build/outputs/bundle
          destination: artifacts
      - store_artifacts:
          path: app/build/outputs/mapping/release
          destination: artifacts
